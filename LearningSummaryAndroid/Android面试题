#Android面试题
##百度面试题
### 1.View的渲染机制
[Android性能优化第（四）](http://www.jianshu.com/p/9ac245657127)
### 2.OOM是否可以try catch?
   只有在一种情况下，这样做是可行的：在try语句中声明了很大的对象，导致OOM，并且可以确认OOM是由try语句中的对象声明导致的，那么在catch语句中，可以释放掉
这些对象，解决OOM的问题，继续执行剩余语句。
   但是这通常不是合适的做法。Java中管理内存除了显式地catch OOM之外还有更多有效的方法：比如SoftReference, WeakReference, 硬盘缓存等。在JVM用光内存之
前，会多次触发GC，这些GC会降低程序运行的效率。如果OOM的原因不是try语句中的对象（比如内存泄漏），那么在catch语句中会继续抛出OOM
### 3.Bitmap 使用时候注意什么？
3.1 Bitmap图片在加载到内存的时候是按照：宽*高*像素点位数（RGB256*1K，RGB8888*4K）来计算的。你可以把图片看成是由width行、height列的矩阵组成，
    每一个矩阵元素代表一个像素点，每一个像素点都是1byte整数倍的数据，这个数据越大，表示的色彩就越丰富,图片的显示质量就越高。
3.2 要注意总的应用内存的大小限制，在Android系统中，给每一个应用分配了一定的内存空间，分配了多少要看厂家和机型，数值可以通过Runtime.getRuntime()方法
    获取实例，然后通过maxMemory()方法获取系统可为APP分配的最大内存，totalMemory() 获取APP当前所分配的内存heap空间大小，freeMemory()获取当前可用的
    内存，当被耗尽时会自动扩张，但是不会超过maxMemory。
3.3 具体使用图片时一定要注意需要多大的照片。很多图片其实在手机上显示的时候不需要完全把原图加载到内存中，比如我手机相机拍了一张照片是4208*3120的，加载
    到内存中占用的内存就是52M，这是很恐怖的，两张照片差不多就把你的app内存给耗光了。一般情况下你都需要对需要加载的图片进行处理，这个处理主要是减小图片
    尺寸，降低分辨率，比如你的控件显示就是100*100的大小，那你就要把图片缩小到100*100。可以使用Glide、Picasso、Fresco等库加载
3.4 第三个要注意的是及时释放内存。安卓2.3.3(API级别10)之前，Bitmap像素数据和Bitmap对象是分开存储的，像素数据是存储在native memory中，对象存储在
    Dalvik heap中，native memory中的像素数据不是以一种可预见的方式释放,可能导致应用程序暂时超过其内存限制和崩溃，所以在Android2.3.3(API 10)之前，
    你必须要调用recycle()方法来释放掉内存，避免出现OOM，当然前提是确定这个bitmap不再使用，否则会出现 "Canvas: trying to use a recycled bitmap"。
    在Android3.0(API 11)之后，Bitmap的像素数据和Bitmap对象一起存储在Dalvik heap中，所以我们不用再手动调用recycle()来释放Bitmap对象，内存的释放都
    交给垃圾回收器来做了。
    但是ListView或者RecyclerView加载的图片还是要在onDestroy()中清空的，不然会内存泄漏
