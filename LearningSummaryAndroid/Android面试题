#Android面试题
##百度面试题
### 1.View的渲染机制
[Android性能优化第（四）](http://www.jianshu.com/p/9ac245657127)
### 2.OOM是否可以try catch?
   只有在一种情况下，这样做是可行的：在try语句中声明了很大的对象，导致OOM，并且可以确认OOM是由try语句中的对象声明导致的，那么在catch语句中，可以释放
   掉这些对象，解决OOM的问题，继续执行剩余语句。
   但是这通常不是合适的做法。Java中管理内存除了显式地catch OOM之外还有更多有效的方法：比如SoftReference, WeakReference, 硬盘缓存等。在JVM用光内存
   之前，会多次触发GC，这些GC会降低程序运行的效率。如果OOM的原因不是try语句中的对象（比如内存泄漏），那么在catch语句中会继续抛出OOM
### 3.Bitmap 使用时候注意什么？
3.1 Bitmap图片在加载到内存的时候是按照：宽*高*像素点位数（RGB256*1K，RGB8888*4K）来计算的。你可以把图片看成是由width行、height列的矩阵组成，
    每一个矩阵元素代表一个像素点，每一个像素点都是1byte整数倍的数据，这个数据越大，表示的色彩就越丰富,图片的显示质量就越高。
3.2 要注意总的应用内存的大小限制，在Android系统中，给每一个应用分配了一定的内存空间，分配了多少要看厂家和机型，数值可以通过Runtime.getRuntime()方法
    获取实例，然后通过maxMemory()方法获取系统可为APP分配的最大内存，totalMemory() 获取APP当前所分配的内存heap空间大小，freeMemory()获取当前可用的
    内存，当被耗尽时会自动扩张，但是不会超过maxMemory。
3.3 具体使用图片时一定要注意需要多大的照片。很多图片其实在手机上显示的时候不需要完全把原图加载到内存中，比如我手机相机拍了一张照片是4208*3120的，加载
    到内存中占用的内存就是52M，这是很恐怖的，两张照片差不多就把你的app内存给耗光了。一般情况下你都需要对需要加载的图片进行处理，这个处理主要是减小图
    片尺寸，降低分辨率，比如你的控件显示就是100*100的大小，那你就要把图片缩小到100*100。可以使用Glide、Picasso、Fresco等库加载
3.4 第三个要注意的是及时释放内存。安卓2.3.3(API级别10)之前，Bitmap像素数据和Bitmap对象是分开存储的，像素数据是存储在native memory中，对象存储在
    Dalvik heap中，native memory中的像素数据不是以一种可预见的方式释放,可能导致应用程序暂时超过其内存限制和崩溃，所以在Android2.3.3(API 10)之前，
    你必须要调用recycle()方法来释放掉内存，避免出现OOM，当然前提是确定这个bitmap不再使用，否则会出现 "Canvas: trying to use a recycled bitmap"。
    在Android3.0(API 11)之后，Bitmap的像素数据和Bitmap对象一起存储在Dalvik heap中，所以我们不用再手动调用recycle()来释放Bitmap对象，内存的释放都
    交给垃圾回收器来做了。
    但是我们通常把一些对象的引用加入到了集合容器（比如ArrayList）中，当我们不需要该对象时，并没有把它的引用从集合中清理掉，这样这个集合就会越来越大。
    如果这个集合是static的话，那情况就更严重了。
### 4.内存泄露如何产生？
    当一个对象已经不需要再使用本该被回收时，另外一个正在使用的对象持有它的引用从而导致它不能被回收，这导致本该被回收的对象不能被回收而停留在内存中，
这就产生了内存泄漏
    [内存泄漏](http://www.jianshu.com/p/90caf813682d)
    [LeakCanary](http://www.jianshu.com/p/0049e9b344b0)
### 5.适配器模式，装饰者模式，外观模式的异同？
    5.1 装饰者模式主要强调的是在不改变原有类的基础上，添加新功能。
    5.2 适配器模式，主要是对适配对象进行调整，以便适合消费者的需求。从而达到消费者和被适配者解耦的目的。
    5.3 外观模式的特点主要是简化接口，以及减少客户端对外观组件的耦合。因为如果客户端变化来，组件的子系统变化了，不用影响客户端。除此之外，在封装组件
    时，适当的在外观类中添加一些自己想要的规则。如上面例子中各设备的开关顺序，或者拍照和打印之前其设备是否开启等。
### 6. ANR 如何产生？
    主线程发生耗时操作而被阻塞，超过系统允许的安全时间。[Android ANR产生原因](http://blog.sina.com.cn/s/blog_618199e60101kvbl.html)
### 7. StringBuffer与StringBuilder 的区别？String.intern()的用法
    StringBuffer是线程安全的，StingBuilder是非线程安全的。相比于String，他们在str+“someStr”不必创建更多对象，常用于字符串拼接。String.intern()
    用于扩展静态常量池
### 8. 如何保证线程安全？
    8.1 避免在主线程执行耗时操作：文件读写、网络访问等，这些操作应该在子线程完成
    8.2 避免在子线程访问UI，可以使用handler.post()等做线程切换
    8.3 多线程竞争时，对共享资源使用synchronized、ReentrantLock(可重入锁，可以有效避免死锁问题，Java1.5推出)保护，使用Volatile保证虚拟机赋值不
    重新排序
    8.4 使用Android提供的Sync*类做同步操作
### 9. java四中引用
    强引用：只要某个对象有强引用与之关联，JVM必定不会回收这个对象，即使在内存不足的情况下，JVM宁愿抛出OutOfMemory错误也不会回收这种对象。
    如果想中断强引用和某个对象之间的关联，可以显示地将引用赋值为null，这样一来的话，JVM在合适的时间就会回收该对象。
    软引用（SoftReference）：被软引用关联的对象只有在内存不足时才会被回收
    弱引用（WeakReference）：被弱引用关联的对象在JVM进行垃圾回收时总会被回收
    针对上面的特性，软引用适合用来进行缓存，当内存不够时能让JVM回收内存，弱引用能用来在回调函数中防止内存泄露。
    虚引用：在java中用java.lang.ref.PhantomReference类表示。如果一个对象与虚引用关联，则跟没有引用与之关联一样，在任何时候都可能被垃圾回收器回收。
需要注意的是，虚引用必须和引用队列关联使用，当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会把这个虚引用加入到与之 关联的引用队列中。程序
可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收。
    [Java中的四种引用方式](http://www.cnblogs.com/alias-blog/p/5793108.html)

### 10. 强引用置为null，会不会被回收？
    只要某个对象有强引用与之关联，JVM必定不会回收这个对象，即使在内存不足的情况下，JVM宁愿抛出OutOfMemory错误也不会回收这种对象。
    如果想中断强引用和某个对象之间的关联，可以显示地将引用赋值为null，这样一来的话，JVM在合适的时间就会回收该对象。例如，
    Object object = new Object();
    new Object()得到一个对象的实例，它被分配在虚拟机堆这个内存区，如果被赋值给object，就构成一个强引用链接，系统打死也不回收它。
    object是一个变量，要么是某个方法的局部变量，要么是类的成员变量。
    a. 如果object是局部变量，就在虚拟机栈分配内存，这时候object=null；出了定义域自然就
    可以被GC回收，但不一定是下一次GC回收，可能是下下次。
    b. 如果object是类的成员变量，它属于类本身与宿主类同生命周期，自然在虚拟机堆分配内存。只要类有任何一个实例存在，object就无法被GC回收
    对于以上两种情况，new Object()脱离了引用它的变量，就断了到GCRoot的路径，自然会被GC标记回收
### 11. glide 使用什么缓存？
    a.内存缓存:Glide中有一个叫做BitmapPool的类，可以复用其中的Bitmap对象，从而避免Bitmap对象的创建，减小内存开销。
    b.磁盘缓存:在Glide中磁盘缓存默认使用的是LRU（Least Recently Used）算法。如果你想使用其他的缓存算法，就只能通过实现DiskCache接口来完成了。
### 12. Glide 内存缓存如何控制大小？
    一般情况下，开发者是不需要自己去指定它们的大小的，因为Glide已经帮我们做好了。默认的内存缓存和BitmapPool的大小由MemorySizeCalculator根据当前
    设备的屏幕大小和可用内存计算得到。同时Glide还支持动态的缓存大小调整，在存在大量图片的Activity/Fragment中，开发者可以通过setMemoryCategory方
    法来提高Glide的内存缓存大小，从而加快图片的加载速度。在有些情况下我们不希望做内存缓存（比如加载GIF图片），这个时候可以调用
    skipMemoryCache(true)方法跳过内存缓存。
    
 ## 阿里巴巴面试题
 ### 1.LRUCache原理
 Android官方是这么说的：
 A cache that holds strong references to a limited number of values. Each time a value is accessed, it is moved to the head of a queue. 
 When a value is added to a full cache, the value at the end of that queue is evicted and may become eligible for garbage collection.
    该缓存对指定数量的缓存值持有强引用（OOM都回收不了的资源），每次某个值被访问，就会被移动到“队列”的开头。当缓存队列满的时候，如果再往队列里添加缓
 存值的话，队列尾部的缓存值出列，而且GC可以随时回收它。
 If your cached values hold resources that need to be explicitly released, override {@link #entryRemoved}.
    如果缓存值持有需要被显式释放的资源，你需要覆写{@link #entryRemoved}方法。比如Android2.3以前的Bitmap，如果不调用其recycle方法，资源就不能释放，
 GC无法回收造成内存泄漏。覆写entryRemoved()可以通过设置flag或者判断版本等方式来是当前资源可回收
 If a cache miss should be computed on demand for the corresponding keys, override {@link #create}. This simplifies the calling code, 
 allowing it to assume a value will always be returned, even when there's a cache miss.
    如果根据对应键需求应该被计算的某个缓存值丢失，可以覆写create()方法，这样可以简化调用代码，允许假设一个返回值
 This class is thread-safe. Perform multiple cache operations atomically by synchronizing on the cache
    该类是线程安全的，通过synchronized(cache)实现多线程缓存操作。
    此外，该类需要重写sizeof()方法，默认根据添加缓存数计算。通常分配当前APP可用内存的1/8
    （int maxMemory = (int) (Runtime.getRuntime().maxMemory() / 1024)/8;  ）
    这就是LRU（Least Recently Used，最近最少使用）的原理。
    LRUCache内部维护主要是通过LinkedHashMap实现。它是一个继承自HashMap的双向链表主要就是 将 LinkedHashMap的accessOrder设置为true来实现LRU，
 利用访问顺序而不是插入顺序。把HashMap中保存的Entry重写为双向链表的节点元素，维护链表来保证访问顺序。
 [LinkedHashMap与LruCache的源码分析](http://mp.weixin.qq.com/s/Dp1-qPrJnk1pYJnDsbdLCg)
 
 [DiskLruCache使用](https://yq.aliyun.com/articles/63710)
 
 ### 2. SparseArray原理
     SparseArray是Android推出的采用二分法查找的数据结构，在低于1000的数量级时，查找速度快
     SparseArray不需要对key和value进行auto-boxing（将原始类型封装为对象类型，比如把int类型封装成Integer类型），结构比HashMap简单（SparseArray
 内部主要使用两个一维数组来保存数据，一个用来存key，一个用来存value）不需要额外的额外的数据结构（主要是针对HashMap中的HashMapEntry而言的）。
 [SparseArray原理](http://blog.csdn.net/hlglinglong/article/details/45462773)
 ### 3. 开启线程的三种方式,run()和start()方法区别
     区别：调用start方法可启动线程，而run方法只是thread的一个普通方法调用，还是在主线程里执行。
     开启线程的方式：
     3.1 继承Thread 
     3.2 实现Runnable.run()接口，还能通过handler.remove()掉 
     3.3 通过Callable.call()和FutureTask(可以预测线程状态，有返回值)创建线程
     [java创建线程的三种方式及其对比](http://blog.csdn.net/longshengguoji/article/details/41126119)
 ### 4. 判断环（猜测应该是链表环）
     通过两个指针p1,p2都指向开头的位置，然后通过while循环让指针往前移动，p1每次移动一个step，p2每次移动两个step,如果有环，p2在比p1多移动一个环的时
     候，正好遇上p1。这时候有p1.equals(p2)
 ### 5. 
